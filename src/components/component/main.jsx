/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/oHYwnxYDGHV
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */
"use client";
/** Add fonts into your Next.js project:

import { Arimo } from 'next/font/google'
import { Libre_Franklin } from 'next/font/google'

arimo({
  subsets: ['latin'],
  display: 'swap',
})

libre_franklin({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
import Link from "next/link";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import { CardContent, Card, CardTitle, CardHeader } from "@/components/ui/card";
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { useState } from "react";

export function Main() {
  const [question, setQuestion] = useState("");
  const [answer, setAnswer] = useState("");
  const [tags, setTags] = useState("");

  // State for list of flashcards
  const [flashcards, setFlashcards] = useState([]);

  // State for tracking the flashcard being edited
  const [editingFlashcardId, setEditingFlashcardId] = useState(null);

  const [operation, setOperation] = useState("Create New");

  const handleSubmit = (e) => {
    e.preventDefault();

    if (editingFlashcardId !== null) {
      // Editing existing flashcard
      const updatedFlashcards = flashcards.map((flashcard) => {
        if (flashcard.id === editingFlashcardId) {
          return {
            ...flashcard,
            question,
            answer,
            tags: tags.split(",").map((tag) => tag.trim()),
          };
        }
        return flashcard;
      });

      setFlashcards(updatedFlashcards);
      setEditingFlashcardId(null);
    } else {
      // Adding new flashcard
      const newFlashcard = {
        id: Date.now(), // Generate unique ID (timestamp)
        question,
        answer,
        tags: tags.split(",").map((tag) => tag.trim()),
      };

      setFlashcards((prevFlashcards) => [...prevFlashcards, newFlashcard]);
    }

    // Clear form inputs
    setQuestion("");
    setAnswer("");
    setTags("");
    setOperation("Create New");
  };

  const handleDeleteFlashcard = (id) => {
    setFlashcards((prevFlashcards) =>
      prevFlashcards.filter((flashcard) => flashcard.id !== id)
    );
  };

  const handleEditFlashcard = (id) => {
    const flashcardToEdit = flashcards.find((flashcard) => flashcard.id === id);
    setQuestion(flashcardToEdit.question);
    setAnswer(flashcardToEdit.answer);
    setTags(flashcardToEdit.tags.join(", "));
    setOperation("Update");
    setEditingFlashcardId(id);
  };

  return (
    <div className="flex min-h-screen flex-col">
      <header className="bg-gray-900 py-4 px-6 text-white">
        <div className="container mx-auto flex items-center justify-between">
          <Link className="flex items-center gap-2 font-semibold" href="#">
            <BookIcon className="h-6 w-6" />
            <span>FlashCards</span>
          </Link>
        </div>
      </header>
      <main className="flex-1 bg-gray-100 py-8 px-6">
        <div className="container mx-auto grid grid-cols-1 gap-8 md:grid-cols-[1fr_300px]">
          <div>
            <div className="mb-6 flex items-center justify-between">
              <h1 className="text-2xl text-gray-900 font-bold">
                My Flashcards
              </h1>
            </div>
            <div className="space-y-4">
              {flashcards.map((flashcard) => (
                <Card key={flashcard.id}>
                  <CardContent className="grid grid-cols-[1fr_auto] items-center gap-4">
                    <div className="pt-3">
                      <h3 className="text-lg font-semibold">
                        {flashcard.question}
                      </h3>
                      <p className="text-gray-200">{flashcard.answer}</p>
                      <div className="mt-2 flex flex-wrap gap-2">
                        {flashcard.tags.map((tag, index) => (
                          <Badge key={index}>{tag}</Badge>
                        ))}
                      </div>
                    </div>
                    <div className="flex gap-2">
                      <Button
                        onClick={() => handleEditFlashcard(flashcard.id)}
                        size="sm"
                        variant="outline"
                      >
                        <EditIcon className="h-4 w-4" />
                        <span className="sr-only">Edit</span>
                      </Button>
                      <Button
                        onClick={() => handleDeleteFlashcard(flashcard.id)}
                        className="text-red-500"
                        size="sm"
                        variant="outline"
                      >
                        <TrashIcon className="h-4 w-4" />
                        <span className="sr-only">Delete</span>
                      </Button>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          </div>
          <div className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle>{operation} Flashcard</CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <form onSubmit={handleSubmit}>
                  <div className="space-y-2">
                    <Label htmlFor="question">Question</Label>
                    <Input
                      id="question"
                      placeholder="Enter the question"
                      value={question}
                      onChange={(e) => setQuestion(e.target.value)}
                      required
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="answer">Answer</Label>
                    <Input
                      id="answer"
                      placeholder="Enter the answer"
                      value={answer}
                      onChange={(e) => setAnswer(e.target.value)}
                      required
                    />
                  </div>
                  <div className="space-y-2">
                    <Label htmlFor="tags">Tags</Label>
                    <Input
                      id="tags"
                      placeholder="Enter tags (separated by commas)"
                      value={tags}
                      onChange={(e) => setTags(e.target.value)}
                      required
                    />
                  </div>
                  <Button type="submit" className="mt-3 w-full">
                    Save Flashcard
                  </Button>
                </form>
              </CardContent>
            </Card>
          </div>
        </div>
      </main>
      <footer className="bg-gray-900 py-4 px-6 text-white">
        <div className="container mx-auto flex items-center justify-between">
          <p className="text-sm">Â© 2024 FlashCards</p>
          <nav className="flex items-center gap-4">
            <Link className="hover:underline" href="#">
              Privacy
            </Link>
            <Link className="hover:underline" href="#">
              Terms
            </Link>
            <Link className="hover:underline" href="#">
              Contact
            </Link>
          </nav>
        </div>
      </footer>
    </div>
  );
}

function BookIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M4 19.5v-15A2.5 2.5 0 0 1 6.5 2H20v20H6.5a2.5 2.5 0 0 1 0-5H20" />
    </svg>
  );
}

function EditIcon(props) {
  return (
    <svg
      {...props}
      class="feather feather-edit"
      fill="none"
      height="20"
      stroke="currentColor"
      stroke-linecap="round"
      stroke-linejoin="round"
      stroke-width="2"
      viewBox="0 0 24 24"
      width="24"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7" />
      <path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z" />
    </svg>
  );
}

function DeleteIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M20 5H9l-7 7 7 7h11a2 2 0 0 0 2-2V7a2 2 0 0 0-2-2Z" />
      <line x1="18" x2="12" y1="9" y2="15" />
      <line x1="12" x2="18" y1="9" y2="15" />
    </svg>
  );
}

function TrashIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M3 6h18" />
      <path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6" />
      <path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2" />
    </svg>
  );
}
